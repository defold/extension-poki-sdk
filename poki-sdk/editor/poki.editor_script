local M = {}

local function poki_errors(config)
    if not next(config.architectures) then
        return "At least one architecture must be selected."
    end
end

local poki_bundle_dialog = editor.ui.component(function(props)
    local config, set_config = editor.ui.use_state(props.config)
    local architecture_error = poki_errors(config)
    return editor.bundle.dialog("Bundle and Submit for QA", config, nil, architecture_error, {
        editor.bundle.grid_row("Architectures", {
            editor.bundle.set_element_check_box(config, set_config, "architectures", "js-web", "asm.js", architecture_error),
            editor.bundle.set_element_check_box(config, set_config, "architectures", "wasm-web", "WebAssembly (wasm)", architecture_error)
        }),
        editor.bundle.common_variant_grid_row(config, set_config),
        editor.bundle.texture_compression_grid_row(config, set_config),
        editor.bundle.check_boxes_grid_row(config, set_config)
    })
end)

local function bundle_poki(show_dialog)
    local config = editor.bundle.config(show_dialog, "bundle.poki", poki_bundle_dialog, poki_errors)
    local js = config.architectures["js-web"]
    local wasm = config.architectures["wasm-web"]
    local output_subdir = (js and wasm and "universal-web") or (js and "js-web") or "wasm-web"
    local output_directory = editor.bundle.output_directory(show_dialog, output_subdir)
    local architectures = (js and wasm and "js-web,wasm-web") or (js and "js-web") or "wasm-web"
    editor.bundle.create(config, output_directory, {platform = "js-web", architectures = architectures})

    local port = 8000
    editor.execute("bash", "poki-sdk/editor/starthttpserver.sh", output_directory, tostring(port))
    --editor.browser("https://app.poki.dev/upload-defold?project=MYPROJECT&zipfile=http://127.0.0.1:" .. port .. "/poki.zip")
end

function M.get_commands()
    return {
        editor.bundle.command("Poki QA...", "bundle-poki", bundle_poki)
    }
end

function M.get_prefs_schema()
    return {
        ["bundle.poki"] = editor.bundle.config_schema(editor.bundle.common_variant_schema, {
            architectures = editor.prefs.schema.set({
                item = editor.prefs.schema.enum({values = {"js-web", "wasm-web"}}),
                default = {["wasm-web"] = true}
            })
        }),
    }
end

return M